# AUTOGENERATED FROM 'queries/post/get_comment.edgeql' WITH:
#     $ gel-py --dir queries


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetCommentResult(NoPydanticValidation):
    id: uuid.UUID
    comments: list[GetCommentResultCommentsItem]


@dataclasses.dataclass
class GetCommentResultCommentsItem(NoPydanticValidation):
    id: uuid.UUID
    created: datetime.datetime
    dislike_count: int
    like_count: int
    content: str
    user: GetCommentResultCommentsItemUser


@dataclasses.dataclass
class GetCommentResultCommentsItemUser(NoPydanticValidation):
    id: uuid.UUID
    name: str
    email: str


async def get_comment(
    executor: gel.AsyncIOExecutor,
    *,
    paper_id: str,
) -> GetCommentResult | None:
    return await executor.query_single(
        """\
        select Paper::Post {
          comments: {
            id,
            created,
            dislike_count,
            like_count,
            content,
            user: { id, name, email }
          }
        } filter .paper_id = <str>$paper_id;\
        """,
        paper_id=paper_id,
    )
