# AUTOGENERATED FROM 'queries/posts/search.edgeql' WITH:
#     $ gel-py --dir queries


from __future__ import annotations
import dataclasses
import gel
import typing
import uuid


PaperEmbedding = typing.Sequence[float]


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class SearchResult(NoPydanticValidation):
    id: uuid.UUID
    paper_id: str
    cosine_similarity: float


async def search(
    executor: gel.AsyncIOExecutor,
    *,
    embedding: PaperEmbedding,
    limit: int,
) -> list[SearchResult]:
    return await executor.query(
        """\
        select Paper::Post {
          paper_id,
          cosine_similarity := 1 - ext::pgvector::cosine_distance(
            .embedding, <Paper::Embedding>$embedding
          )
        } order by ext::pgvector::cosine_distance(
          .embedding, <Paper::Embedding>$embedding
        ) limit <int64>$limit;\
        """,
        embedding=embedding,
        limit=limit,
    )
