# AUTOGENERATED FROM 'queries/user/insert_recommendation.edgeql' WITH:
#     $ gel-py --dir queries


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class InsertRecommendationResult(NoPydanticValidation):
    id: uuid.UUID


async def insert_recommendation(
    executor: gel.AsyncIOExecutor,
    *,
    email: str,
    recommendation: list[uuid.UUID],
) -> InsertRecommendationResult | None:
    return await executor.query_single(
        """\
        with 
          user := (select User filter .email = <str>$email),
          papers := (select Paper::Post filter .id in array_unpack(<array<uuid>>$recommendation))
        update User 
        filter .email = <str>$email
        set {
          recommends := papers
        };\
        """,
        email=email,
        recommendation=recommendation,
    )
