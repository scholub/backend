# AUTOGENERATED FROM 'queries/user/get_user_by_email.edgeql' WITH:
#     $ gel-py --dir queries


from __future__ import annotations
import array
import dataclasses
import gel
import uuid


PaperEmbedding = array.array


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetUserByEmailResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    email: str
    password: str
    bookmarks: list[GetUserByEmailResultBookmarksItem]
    recommends: list[GetUserByEmailResultRecommendsItem]
    profile_image: str


@dataclasses.dataclass
class GetUserByEmailResultBookmarksItem(NoPydanticValidation):
    id: uuid.UUID
    paper_id: str
    embedding: PaperEmbedding


@dataclasses.dataclass
class GetUserByEmailResultRecommendsItem(NoPydanticValidation):
    id: uuid.UUID
    paper_id: str


async def get_user_by_email(
    executor: gel.AsyncIOExecutor,
    *,
    email: str,
) -> GetUserByEmailResult | None:
    return await executor.query_single(
        """\
        select User {
          name,
          email,
          password,
          bookmarks: {
            paper_id,
            embedding
          },
          recommends:{
            paper_id
          },
          profile_image
        } filter .email = <str>$email limit 1;\
        """,
        email=email,
    )
