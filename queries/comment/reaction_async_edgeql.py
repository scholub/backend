# AUTOGENERATED FROM 'queries/comment/reaction.edgeql' WITH:
#     $ gel-py --dir queries


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class ReactionResult(NoPydanticValidation):
    id: uuid.UUID


async def reaction(
    executor: gel.AsyncIOExecutor,
    *,
    comment_id: uuid.UUID,
    user_id: uuid.UUID,
    is_like: bool,
) -> ReactionResult | None:
    return await executor.query_single(
        """\
        with
          comment := (select Comment::Comment filter .id = <uuid>$comment_id limit 1),
          user := (select User filter .id = <uuid>$user_id limit 1),
        insert Comment::Reaction {
          is_like := <bool>$is_like,
          user := user,
          comment := comment
        } unless conflict on ((.user, .comment)) else (
          update Comment::Reaction filter .user = user and .comment = .comment set {
            is_like := <bool>$is_like
          }
        );
        update Comment::Comment filter .id = <uuid>$comment_id set {
          like_count := count((select Comment::Reaction filter .comment.id = <uuid>$comment_id and .is_like = true)),
          dislike_count := count((select Comment::Reaction filter .comment.id = <uuid>$comment_id and .is_like = false))
        };\
        """,
        comment_id=comment_id,
        user_id=user_id,
        is_like=is_like,
    )
