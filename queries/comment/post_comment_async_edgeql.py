# AUTOGENERATED FROM 'queries/comment/post_comment.edgeql' WITH:
#     $ gel-py --dir queries


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class PostCommentResult(NoPydanticValidation):
    id: uuid.UUID


async def post_comment(
    executor: gel.AsyncIOExecutor,
    *,
    content: str,
    user_id: uuid.UUID,
    paper_id: str,
) -> PostCommentResult | None:
    return await executor.query_single(
        """\
        update Paper::Post
        filter .paper_id = <str>$paper_id
        set {
          comments += (
            insert Comment::Comment {
              created := datetime_current(),
              content := <str>$content,
              user := (select User filter .id = <uuid>$user_id)
            }
          )
        };\
        """,
        content=content,
        user_id=user_id,
        paper_id=paper_id,
    )
